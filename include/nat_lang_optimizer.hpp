#pragma once

#ifdef NAT_LANG_OPT
    const uint8_t cwtov_table[256] = {
        ' ', 'e', 't', 'a', 'o', 'i', 'n', 's', 'r', 'h', 'd', 'l', 'u', 'c', 'm', 'f', 'w', 'g', 'p', 'b', 'v', 'k', 'x', 'q', 'j', 'z', '\n',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
        '\'', ',', '.', '?', ':', ';', '-', '\"', '!', '(', ')', '_', '{', '}', '[', ']', '=', '+', '<', '>', '%', '&', '$', '#', '*', '/', '@', '\\', '|', '~', '^',
        'E', 'T', 'A', 'O', 'I', 'N', 'S', 'R', 'H', 'D', 'L', 'U', 'C', 'M', 'F', 'W', 'G', 'P', 'B', 'V', 'K', 'X', 'Q', 'J', 'Z',

        96, 127, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,19 ,20 ,21 ,22 ,23 ,24 ,25 ,26 ,27 ,28 ,29 ,30 ,31,
        128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 
        147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 
        166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 
        185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 
        204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 
        223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 
        242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255
    };

    uint8_t vtocw_table[256];

    bool fill_vtocw(uint8_t* vtocw, const uint8_t* cwtov) {
        vtocw[0] = uint8_t(std::distance(cwtov, std::find(cwtov, cwtov + 256, uint8_t(0))));
        for(uint8_t i=1; i>0; ++i) {
            vtocw[i] = uint8_t(std::distance(cwtov, std::find(cwtov, cwtov + 256, uint8_t(i))));
        }
        return true;
    }

    bool vtocw_built = fill_vtocw(vtocw_table, cwtov_table);
#else
    bool vtocw_built = false;
#endif